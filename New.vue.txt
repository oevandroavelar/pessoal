<template>
  <section class="page-wrapper new-os" style="min-height: 284px;">
    <div>
      <Header1
        :title="$t('service_orders.new')"
        :hasBreadcrumb="true"
        :breadcrumb1="$t('service_orders.self')"
        link1="/service_orders/"
        :breadcrumb2="hasPreOS() && $t('pre_service_orders.self')"
        link2="/pre_service_orders/"
        :activeBreadcrumb="$t('new')"
      />
      <div class="row">
        <b-col md="12">
          <b-form @submit.stop.prevent="handleSubmit">
            <b-card-group>
              <b-card style="flex: 3 1 0%;  margin-bottom:0px !important; border-color: #000 ">
                <div>
                  <b-row>
                    <b-col lg="6">
                      <b-form-group id="inputNewClient" label-for="inputNewClient">
                        <label class="card-title">
                          <font-awesome-icon icon="briefcase" />
                          {{$t('clients.self')}}
                          <span style="color:red">*</span>
                        </label>
                        <model-list-select
                          v-on:input="inputClient($event)"
                          @searchchange="findClient($event)"
                          class="model-select"
                          :list="find_clients"
                          optionValue="id"
                          optionText="name"
                          v-model="form.client_id"
                          :placeholder="$t('service_orders.enter_client')"
                        ></model-list-select>
                      </b-form-group>
                    </b-col>
                    <b-col>
                      <b-form-group id="inputNewUser" label-for="inputNewUser">
                        <label class="card-title">
                          <font-awesome-icon icon="user" />
                          {{$t('service_orders.requester')}}
                          <span style="color:red">*</span>
                        </label>
                        <model-list-select
                          @searchchange="findUser($event)"
                          v-on:input="inputUser($event)"
                          class="model-select"
                          :list="find_users"
                          optionValue="id"
                          :custom-text="customRequesterText"
                          v-model="form.requester_id"
                          :placeholder="$t('service_orders.enter_requester')"
                        ></model-list-select>
                      </b-form-group>
                    </b-col>
                  </b-row>
                  <b-row>
                    <b-col sm="6" md="4">
                      <b-form-group id="inputNewClient" label-for="inputNewClient">
                        <label class="card-title">
                          <font-awesome-icon icon="gopuram" />
                          {{$t('clients.sub_company')}}
                          <span style="color:red">*</span>
                        </label>

                        <model-list-select
                          :isDisabled="!form.client_id || !form.requester_id"
                          class="model-select"
                          :list="sub_company_by_client"
                          optionValue="id"
                          optionText="name"
                          v-model="form.sub_company_id"
                          :placeholder="!form.client_id || !form.requester_id ? $t('clients.select_client_and_requestor'): $t('clients.select_sub_company')"
                        ></model-list-select>
                      </b-form-group>
                    </b-col>
                    <b-col sm="6" md="4">
                      <b-form-group id="inputNewClient" label-for="inputNewClient">
                        <label class="card-title">
                          <font-awesome-icon icon="tag" />
                          {{$t('departments.self')}}
                        </label>
                        <model-list-select
                          :isDisabled="!form.client_id || !form.requester_id"
                          class="model-select"
                          :list="department_by_user"
                          optionValue="id"
                          optionText="name"
                          v-model="form.department_id"
                          :placeholder="!form.client_id || !form.requester_id ? $t('clients.select_client_and_requestor'): $t('departments.select')"
                        ></model-list-select>
                      </b-form-group>
                    </b-col>
                    <b-col sm="6" md="4">
                      <b-form-group>
                        <label class="card-title d-block">
                          <font-awesome-icon icon="person-booth" />
                          {{ $t('service_orders.request_form') }}
                          <span style="color:red">*</span>
                        </label>
                        <b-form-input
                          v-if="hasPreOS()"
                          :value="$t('service_orders.auto_email')"
                          type="text"
                          disabled
                          size="sm"
                          placeholder="Digite aqui"
                        ></b-form-input>
                        <b-form-radio-group buttons size="sm" button-variant="outline-primary" v-if="!hasPreOS()">
                          <b-form-radio
                            v-model="form.request_form"
                            value="manual_email"
                            name="select_box_status_stored"
                          >{{ $t('service_orders.manual_email') }}</b-form-radio>

                          <b-form-radio
                            v-model="form.request_form"
                            value="visit_company"
                            name="select_box_status_sent"
                          >{{ $t('service_orders.visit_company') }}</b-form-radio>
                          <b-form-radio
                            v-model="form.request_form"
                            value="others"
                            name="select_box_status_to_eliminate"
                          >{{ $t('service_orders.others') }}</b-form-radio>
                        </b-form-radio-group>
                      </b-form-group>
                    </b-col>
                  </b-row>
                  <div v-if="form.request_form == 'others' ">
                    <b-form-group>
                      <label class="card-tittle">
                        <font-awesome-icon icon="person-booth" />
                        {{$t('service_orders.enter_request_form')}}
                        <span style="color:red">*</span>
                      </label>
                      <b-form-input
                        align="right"
                        type="text"
                        size="sm"
                        placeholder="Digite aqui"
                        required
                      ></b-form-input>
                    </b-form-group>
                  </div>
                  <b-row>
                    <b-col>
                      <b-form-group>
                        <label class="card-title">
                          <font-awesome-icon icon="edit" />
                          {{ $t('service_orders.title') }}
                        </label>
                        <b-form-input
                          :autofocus="true"
                          size="sm"
                          id="inputNewCity"
                          type="text"
                          v-model="form.title"
                          :placeholder="$t('service_orders.enter_title')"
                        ></b-form-input>
                      </b-form-group>
                    </b-col>
                  </b-row>
                  <b-row>
                    <b-col>
                      <b-form-group>
                        <label class="card-title">
                          <font-awesome-icon icon="edit" />
                          {{ $t('service_orders.description') }}
                        </label>
                        <wysiwyg v-model="form.description"  :config="config" placeholder="Digite uma descrição"/>
                      </b-form-group>
                    </b-col>
                  </b-row>
                </div>
              </b-card>
              <b-card style="border-color: #000; margin-bottom:0px !important; ">
                <b-row>
                  <b-col>
                    <form v-on:submit.prevent="addEmail">
                      <b-list-group>
                        <label class="card-title">
                          <font-awesome-icon icon="envelope" />
                          {{$t('service_orders.emails')}}
                          <span style="color:red">*</span>
                        </label>
                        <b-input-group size="sm">
                          <b-form-input
                            class="form-control"
                            type="email"
                            required
                            v-model="newEmail.email"
                            :placeholder="$t('service_orders.enter_emails')"
                          ></b-form-input>
                          <b-input-group-append>
                            <b-button type="submit" variant="primary">
                              <font-awesome-icon icon="plus" />
                            </b-button>
                          </b-input-group-append>
                        </b-input-group>
                        <b-table
                          :empty-text="$t('email.empty')"
                          striped
                          fixed
                          hover
                          :items="emailWithEmails"
                          :fields="requesterEmailFields"
                          thead-class="hidden_header"
                        >
                          <template slot="email" slot-scope="row">
                            <div class="text-truncate">{{row.item.email}}</div>
                          </template>
                          <template slot="actions" slot-scope="row">
                            <font-awesome-icon
                              @click.stop.prevent="deleteEmail(row.item, row.index)"
                              icon="trash-alt"
                              class="text-danger cursor-pointer"
                              style="float: right; font-size: 10px; margin-top: 5px;"
                            />
                          </template>
                        </b-table>
                      </b-list-group>
                    </form>
                  </b-col>
                </b-row>
                <b-row>
                  <b-col>
                    <form v-on:submit.prevent="addPhone">
                      <b-list-group>
                        <label class="card-title">
                          <font-awesome-icon icon="phone" />
                          {{$t('service_orders.phones')}}
                        </label>
                        <b-input-group size="sm">
                          <the-mask
                            class="form-control"
                            type="text"
                            :mask="['(##) ####-####', '(##) #####-####']"
                            required
                            v-model="newPhone.number"
                            :placeholder="$t('phone.enter')"
                          ></the-mask>
                          <b-input-group-append>
                            <b-button type="submit" variant="primary">
                              <font-awesome-icon icon="plus" />
                            </b-button>
                          </b-input-group-append>
                        </b-input-group>
                        <b-table
                          :empty-text="$t('phone.empty')"
                          striped
                          hover
                          :items="phoneWithNumber"
                          :fields="requesterPhoneFields"
                          thead-class="hidden_header"
                        >
                          <template slot="number" slot-scope="phone">
                            <span>{{ phone.item.number | formatPhone }}</span>
                          </template>
                          <template slot="actions" slot-scope="delPhone">
                            <font-awesome-icon
                              @click.stop.prevent="deletePhone(delPhone.item, delPhone.index)"
                              icon="trash-alt"
                              class="text-danger cursor-pointer"
                              style="float: right; font-size: 10px; margin-top: 5px"
                            />
                          </template>
                        </b-table>
                      </b-list-group>
                    </form>
                  </b-col>
                </b-row>
           
              </b-card>
              <b-card-footer style="flex: 100%">
                <b-btn variant="primary" class="btn-md btn-block" type="submit" :disabled="createOS">
                  <font-awesome-icon icon="plus" v-if="!createOS"/>
                  <font-awesome-icon 
                    v-if="createOS" 
                    icon="sync" 
                    spin 
                  />
                  {{ $t('service_orders.create') }}
                </b-btn>
              </b-card-footer>
            </b-card-group>
          </b-form>
        </b-col>
      </div>
    </div>
    <ConfirmModal
      ref="confirm_modal_component"
      :title-message="$t('action_ask')"
      :message="$t('service_orders.create')"
      :okTitle="$t('create')"
      @execute="addServiceOrders()"
    />
  </section>
</template>
<script>
import { mapGetters } from "vuex";
import { mapActions } from "vuex";
import { TheMask } from "vue-the-mask";
import { ModelListSelect } from "vue-search-select";
import Header1 from "@/components/Header1";
import ConfirmModal from "@/components/ConfirmModal.vue";


export default {
  name: "ServiceOrdersNew",
  data() {
    return {
      content: null,
      createOS: false,
      config: {
        content_style: 'body { font-size: 12px; }',
        height: 200,
        language: "pt_BR",
        theme: "modern",
        fontsize_formats:
          "8px 10px 12px 14px 16px 18px 20px 22px 24px 26px 39px 34px 38px 42px 48px",
        plugins:
          "print preview fullpage searchreplace autolink image textcolor paste",
        toolbar1:
          "formatselect fontsizeselect | bold italic strikethrough forecolor backcolor link image paste",
        paste_data_images: true
      },
      form: {
        return_boxe_id: "",
        requester_id: "",
        client_id: "",
        sub_company_id: "",
        department_id: "",
        title: "",
        description: "",
        request_form: null,
        responsible_id: "",
        requester_phones: [],
        requester_emails: [],
        follower_emails: [],
        pre_service_order_reference: null 
      },
      user: null,
      phoneWithNumber: [],
      phones: [],
      newPhone: {
        number: ""
      },
      emailWithEmails: [],
      emailWithFollowerEmails: [],
      follower_emails: [],
      emails: [],
      newEmail: {
        email: ""
      },
      newFollowerEmail: {
        email: ""
      },
      requestFormOptions: [
        {
          disabled: true,
          value: null,
          text: this.$t("service_orders.select_request_form")
        },
        { value: "manual_email", text: this.$t("service_orders.manual_email") },
        {
          value: "visit_company",
          text: this.$t("service_orders.visit_company")
        },
        { value: "others", text: this.$t("service_orders.others") }
      ],
      requesterPhoneFields: [
        {
          key: "number",
          label: "Número"
        },
        {
          key: "actions",
          label: ""
        }
      ],
      requesterEmailFields: [
        {
          key: "email",
          label: "E-mail"
        },
        {
          key: "actions",
          label: "",
          tdClass: "actions-header"
        }
      ]
    };
  },
  mounted() {
    if(!this.$route.params.requester_id) {
      this.$store.dispatch("getFindUsers");
    }

    if (this.$route.params && this.$route.params.client_id) {
      this.$store.dispatch("getClearClients", [
        {
          id: this.$route.params.client_id,
          name: this.$route.params.client_name
        }
      ]);
      this.form.client_id = this.$route.params && this.$route.params.client_id;

      this.getUserByClient({
        client_id: this.form.client_id
      }).then(() => {

        if(this.$route.params && this.$route.params.requester_id) {
          
          this.form.request_form = this.$route.params && this.$route.params.request_form;
          this.form.requester_name = this.$route.params && this.$route.params.requester_name;
          this.form.requester_id = this.$route.params && this.$route.params.requester_id;

          this.form.title = this.$route.params && this.$route.params.title;

          if(this.$route.params && this.$route.params.description) {
            this.form.description = this.$route.params && this.$route.params.description;
          }
          

          this.form.requester_emails = this.$route.params && this.$route.params.requester_emails;
          this.form.pre_service_order_reference = this.$route.params && this.$route.params.pre_os_id;


          this.updateSelectedRequester();
          this.inputUser(this.$route.params && this.$route.params.requester_id);
          this.fetchDepartments();
      
        } 
        
        
      });

    } else {

      if(this.$route.params && this.$route.params.requester_id) {
        
        this.findUser(this.$route.params && this.$route.params.requester_name);


         this.getClientByUser(this.$route.params && this.$route.params.requester_id).then(() => {
          if (this.find_clients.length == 1) {
            this.form.client_id = this.find_clients[0].id;
          }


        
          this.form.sub_company_id = "";
          this.form.department_id = "";
        }); 

          
        this.form.request_form = this.$route.params && this.$route.params.request_form;
        this.form.requester_name = this.$route.params && this.$route.params.requester_name;
        this.form.requester_id = this.$route.params && this.$route.params.requester_id;

        this.form.title = this.$route.params && this.$route.params.title;

        if(this.$route.params && this.$route.params.description) {
          this.form.description = this.$route.params && this.$route.params.description;
        }
        

        this.form.requester_emails = this.$route.params && this.$route.params.requester_emails;
        this.emailWithEmails.push({ email: this.$route.params.requester_emails[0] });

        this.form.pre_service_order_reference = this.$route.params && this.$route.params.pre_os_id;

        // this.updateSelectedRequester();
        // this.inputUser(this.$route.params && this.$route.params.requester_id);
        this.fetchDepartments();
      
      }  else {      
        this.$store.dispatch("getFindClients");
      }

    }
  },
  components: {
    Header1,
    TheMask,
    ModelListSelect,
    ConfirmModal,
    // Trumbowyg
  },
  computed: {
    ...mapGetters([
      "client_by_user",
      "sub_company_by_client",
      "department_by_user",
      "current_user",
      "find_users",
      "find_clients"
    ])
  },
  methods: {
    ...mapActions([
      "getClientByUser",
      "getSubCompanyByClient",
      "getDepartmentByUser",
      "saveServiceOrder",
      "getFindUsers",
      "getFindClients",
      "getUser",
      "getUserByClient"
    ]),
    hasPreOS() {
      if(this.$route.params && this.$route.params.pre_os_id) {
        return true 
      } else {
        return false 
      }
    },
    handleSubmit() {
      this.$refs.confirm_modal_component.showModal();
    },
    addServiceOrders() {
      this.createOS = true;
      if (!this.form.requester_id) {
        this.createOS = false;
        this.$toasted.error(this.$t("service_orders.requester_required"));
        return;
      } else if (!this.form.client_id) {
        this.createOS = false;
        this.$toasted.error(this.$t("service_orders.client_required"));
        return;
      } else if (!this.form.sub_company_id) {
        this.createOS = false;
        this.$toasted.error(this.$t("service_orders.sub_company_required"));
        return;
      } else if (this.form.requester_emails.length < 1) {
        this.createOS = false;
        this.$toasted.error(this.$t("service_orders.requester_email_required"));
        return;
      } else if (!this.form.request_form) {
        this.createOS = false;
        this.$toasted.error(this.$t("service_orders.request_form_required"));
        return;
      }
      // this.form.responsible_id = this.current_user.id;
      this.saveServiceOrder({ service_order: this.form })
        .then(response => {
          this.createOS = false;
          this.$router.push(`/service_orders/${response.id}`);
        })
        .catch(error => {
          this.createOS = false;
        });
    },
    subCompanyByClient(client_id, requester_id) {
      this.getSubCompanyByClient(client_id);
      this.getDepartmentByUser({
        requester_id: requester_id,
        client_id: client_id
      });
      this.form.sub_company_id = "";
      this.form.department_id = "";
    },
    addPhone() {
      if (this.newPhone && this.newPhone.number) {
        this.phoneWithNumber.push({ ...this.newPhone });
        this.phones = this.phoneWithNumber.map(phone => phone.number);
        this.phones = this.phones.concat(this.user.phones);
        this.form.requester_phones = this.phones;
        this.newPhone.number = "";
      }
    },
    addEmail() {
      this.emailWithEmails.push({ ...this.newEmail });
      this.emails = this.emailWithEmails.map(item => item.email);
      this.form.requester_emails = this.emails;
      this.newEmail.email = "";
    },
    deletePhone(index) {
      this.phoneWithNumber.splice(index, 1);
      this.phones.splice(index, 1);
      this.form.requester_phones.splice(index, 1);
    },
    deleteEmail(index) {
      this.emailWithEmails.splice(index, 1);
      this.emails.splice(index, 1);
      this.form.requester_emails.splice(index, 1);
    },
    findUser(item) {
      if (!item) return;

      if (this.form.client_id) {
        this.getUserByClient({
          client_id: this.form.client_id
        })
      }
      else {
        this.getFindUsers({
          text: item,
          arqcen_user: ""
        });
      }
    },
    findClient(item) {
      if (item) {
        this.getFindClients(item);
      }
    },
    inputUser(requester_id) {
      if (requester_id) {
        this.user = this.find_users.filter(user => user.id == requester_id)[0];
        this.emails = [];
        this.phones = [];
        this.emailWithEmails = [];
        this.form.requester_emails = [];
        this.form.requester_phones = [];
        this.phoneWithNumber = [];

        if (this.user.email) {
          this.emails = this.emails.concat(this.user.email);
          this.form.requester_emails = this.emails;
          this.emailWithEmails.push({ email: this.user.email });
        }
        if (this.user.phones && this.user.phones.length > 0) {
          for (var i = 0; i < this.user.phones.length; i++) {
            this.phoneWithNumber.push({ number: this.user.phones[i] });
            this.phones = this.phoneWithNumber.map(phone => phone.number);
            this.phones = this.phones.concat(this.user.phones);
            this.form.requester_phones = this.phones;
          }
        }

        if (this.user.arqcen_user) {
          this.fetchDepartments();
          return;
        }

        this.getClientByUser(requester_id).then(() => {
          if (this.find_clients.length == 1) {
            this.form.client_id = this.find_clients[0].id;
          }
          if (requester_id && this.form.client_id) {
            this.form.sub_company_id = "";
            this.form.department_id = "";
            this.getSubCompanyByClient(this.form.client_id).then(() => {
              if (this.sub_company_by_client.length == 1) {
                this.form.sub_company_id = this.sub_company_by_client[0].id;
              }
            });
            this.fetchDepartments();
            // this.getDepartmentByUser({
            //   requester_id: requester_id,
            //   client_id: this.form.client_id
            // }).then(() => {
            //   if (this.department_by_user.length == 1) {
            //     this.form.department_id = this.department_by_user[0].id;
            //   }
            // });
          } else {
            this.form.sub_company_id = "";
            this.form.department_id = "";
          }
        });
      }
      else {
        this.form.sub_company_id = "";
        this.form.department_id = "";
      }
    },
    fetchDepartments() {
      if (!this.form.client_id || !this.form.requester_id) return;

      this.getDepartmentByUser({
        requester_id: this.form.requester_id,
        client_id: this.form.client_id
      }).then(() => {
        if (this.department_by_user.length == 1) {
          this.form.department_id = this.department_by_user[0].id;
        }
      });
    },
    inputClient(client_id) {
      if (!client_id) {
        this.form.sub_company_id = "";
        this.form.department_id = "";
        return;
      }

      this.getSubCompanyByClient(client_id).then(() => {
        if (this.sub_company_by_client.length == 1) {
          this.form.sub_company_id = this.sub_company_by_client[0].id;
        }
      });

      this.getUserByClient({
        client_id: client_id
      }).then(() => {
        this.updateSelectedRequester();

        if (this.find_users.length == 1) {
          let user = this.find_users[0];
          this.form.requester_id = user.id;

          this.inputUser(user.id);
        }
        if (this.form.requester_id && client_id) {
          this.form.sub_company_id = "";
          this.form.department_id = "";
          this.fetchDepartments();
        } else {
          this.form.sub_company_id = "";
          this.form.department_id = "";
        }
      });
    },
    customRequesterText(item) {
      if (item.arqcen_user) {
        return `${item.name} (${this.$t("clients.arqcen_user")})`;
      }
      else {
        const clients_name = item.this_clients.map(client => client.name)
                                              .join("/")
        return `${item.name} (${clients_name})`;
      }
    },
    validateEmail(email) {
      var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(email);
    },
    validatePhone(phone) {
      let city, country, number, value;

      value = phone.value
        .toString()
        .trim()
        .replace(/^\+\-/, "");

      if (value.match(/[^0-9]/)) {
        return phone.value;
      }

      country = void 0;

      city = void 0;

      number = void 0;

      switch (value.length) {
        case 1:
          city = value;
          break;
        case 2:
          city = value;
          break;
        default:
          if (value.length > 8) {
            city = value.slice(0, 2);
            number = value.slice(2);
          } else {
            city = "";
            number = value;
          }
      }

      if (number) {
        if (number.length > 4) {
          if (number.length > 8) {
            number = number.slice(0, 5) + "-" + number.slice(5, 9);
          } else {
            number = number.slice(0, 4) + "-" + number.slice(4, 9);
          }
        } else {
          number = number;
        }

        if (city) {
          phone.value = ("(" + city + ") " + number).trim();
          return phone;
        } else {
          phone.value = number;
          return phone;
        }
      }
    },
    updateSelectedRequester() {
      const user_matches = this.find_users.filter(user => user.id == this.form.requester_id);

      if (user_matches.length == 0) {
        this.form.requester_id = null;
      }
    }
  }
};
</script>
<style>
.mce-notification {
  display: none !important;
}
.hidden_header {
  display: none;
}
.new-os .card .card-title {
  margin-bottom: 5px;
}
</style>
